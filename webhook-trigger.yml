# Webhook Integration Testing
# TechStaX Developer Assessment - Cross-Repository Testing

name: Webhook Integration Test

on:
  schedule:
    # Run every 6 hours to test webhook integration
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      webhook_url:
        description: 'Webhook URL to test (optional)'
        required: false
        type: string
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - push
        - pull_request
        - merge

env:
  WEBHOOK_URL: ${{ github.event.inputs.webhook_url || secrets.WEBHOOK_URL || 'https://your-webhook-repo.replit.app' }}

jobs:
  # Test Push Events
  test-push-events:
    name: Test Push Events
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'push' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Test simple push event
      run: |
        echo "üîÑ Testing PUSH webhook event..."
        
        response=$(curl -s -w "%{http_code}" -X POST ${{ env.WEBHOOK_URL }}/api/webhook \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: push" \
          -H "X-GitHub-Delivery: $(uuidgen)" \
          -d '{
            "repository": {
              "name": "action-repo",
              "full_name": "techstax/action-repo"
            },
            "pusher": {
              "name": "GitHub Actions Bot"
            },
            "head_commit": {
              "id": "'$(date +%s | sha256sum | cut -c1-7)'",
              "message": "Automated CI/CD workflow test",
              "author": {
                "name": "GitHub Actions",
                "email": "actions@github.com"
              }
            },
            "ref": "refs/heads/main"
          }')
        
        http_code=${response: -3}
        response_body=${response%???}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Push webhook test PASSED (HTTP $http_code)"
          echo "Response: $response_body"
        else
          echo "‚ùå Push webhook test FAILED (HTTP $http_code)"
          echo "Response: $response_body"
          exit 1
        fi

    - name: Test push event with multiple commits
      run: |
        echo "üîÑ Testing PUSH webhook with multiple commits..."
        
        response=$(curl -s -w "%{http_code}" -X POST ${{ env.WEBHOOK_URL }}/api/webhook \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: push" \
          -H "X-GitHub-Delivery: $(uuidgen)" \
          -d '{
            "repository": {
              "name": "action-repo",
              "full_name": "techstax/action-repo"
            },
            "pusher": {
              "name": "Developer"
            },
            "commits": [
              {
                "id": "'$(date +%s | sha256sum | cut -c1-7)'",
                "message": "Add new feature implementation",
                "author": {
                  "name": "Developer",
                  "email": "dev@example.com"
                }
              },
              {
                "id": "'$(date +%s | sha256sum | cut -c8-14)'",
                "message": "Update documentation",
                "author": {
                  "name": "Developer",
                  "email": "dev@example.com"
                }
              }
            ],
            "ref": "refs/heads/feature/new-implementation"
          }')
        
        http_code=${response: -3}
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Multi-commit push test PASSED"
        else
          echo "‚ùå Multi-commit push test FAILED (HTTP $http_code)"
          exit 1
        fi

  # Test Pull Request Events
  test-pull-request-events:
    name: Test Pull Request Events
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'pull_request' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Test PR opened event
      run: |
        echo "üîÑ Testing PULL_REQUEST opened webhook..."
        
        pr_number=$((RANDOM % 1000 + 1))
        
        response=$(curl -s -w "%{http_code}" -X POST ${{ env.WEBHOOK_URL }}/api/webhook \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: pull_request" \
          -H "X-GitHub-Delivery: $(uuidgen)" \
          -d '{
            "action": "opened",
            "pull_request": {
              "number": '$pr_number',
              "title": "Implement automated testing workflow",
              "body": "This PR adds comprehensive automated testing capabilities.",
              "head": {
                "ref": "feature/automated-testing"
              },
              "base": {
                "ref": "main"
              },
              "user": {
                "login": "developer"
              },
              "merged": false
            },
            "repository": {
              "name": "action-repo",
              "full_name": "techstax/action-repo"
            }
          }')
        
        http_code=${response: -3}
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ PR opened test PASSED (PR #$pr_number)"
        else
          echo "‚ùå PR opened test FAILED (HTTP $http_code)"
          exit 1
        fi

    - name: Test PR closed (not merged) event
      run: |
        echo "üîÑ Testing PULL_REQUEST closed (not merged) webhook..."
        
        pr_number=$((RANDOM % 1000 + 1))
        
        response=$(curl -s -w "%{http_code}" -X POST ${{ env.WEBHOOK_URL }}/api/webhook \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: pull_request" \
          -H "X-GitHub-Delivery: $(uuidgen)" \
          -d '{
            "action": "closed",
            "pull_request": {
              "number": '$pr_number',
              "title": "Draft feature implementation",
              "head": {
                "ref": "feature/draft-implementation"
              },
              "base": {
                "ref": "main"
              },
              "user": {
                "login": "developer"
              },
              "merged": false
            },
            "repository": {
              "name": "action-repo",
              "full_name": "techstax/action-repo"
            }
          }')
        
        http_code=${response: -3}
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ PR closed (not merged) test PASSED"
        else
          echo "‚ùå PR closed test FAILED (HTTP $http_code)"
          exit 1
        fi

  # Test Merge Events (Bonus Points)
  test-merge-events:
    name: Test Merge Events
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'merge' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Test merged PR event
      run: |
        echo "üîÑ Testing MERGE webhook event (bonus points)..."
        
        pr_number=$((RANDOM % 1000 + 1))
        merge_commit=$(date +%s | sha256sum | cut -c1-7)
        
        response=$(curl -s -w "%{http_code}" -X POST ${{ env.WEBHOOK_URL }}/api/webhook \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: pull_request" \
          -H "X-GitHub-Delivery: $(uuidgen)" \
          -d '{
            "action": "closed",
            "pull_request": {
              "number": '$pr_number',
              "title": "Add comprehensive error handling",
              "body": "This PR implements robust error handling across the application.",
              "head": {
                "ref": "feature/error-handling"
              },
              "base": {
                "ref": "main"
              },
              "user": {
                "login": "senior-developer"
              },
              "merged": true,
              "merge_commit_sha": "'$merge_commit'",
              "merged_by": {
                "login": "tech-lead"
              }
            },
            "repository": {
              "name": "action-repo",
              "full_name": "techstax/action-repo"
            }
          }')
        
        http_code=${response: -3}
        response_body=${response%???}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ MERGE webhook test PASSED (PR #$pr_number merged)"
          echo "üèÜ Bonus points feature working correctly!"
          
          # Check if response indicates MERGE action
          if echo "$response_body" | grep -q "MERGE"; then
            echo "üéØ MERGE action correctly detected in response"
          else
            echo "‚ÑπÔ∏è  Note: Response shows PULL_REQUEST action (merge detection may need improvement)"
          fi
        else
          echo "‚ùå MERGE webhook test FAILED (HTTP $http_code)"
          echo "Response: $response_body"
          exit 1
        fi

  # Verify Webhook Data Persistence
  verify-data-persistence:
    name: Verify Data Persistence
    runs-on: ubuntu-latest
    needs: [test-push-events, test-pull-request-events, test-merge-events]
    if: always()
    
    steps:
    - name: Check webhook statistics
      run: |
        echo "üìä Checking webhook receiver statistics..."
        
        stats_response=$(curl -s -w "%{http_code}" ${{ env.WEBHOOK_URL }}/api/stats)
        http_code=${stats_response: -3}
        stats_body=${stats_response%???}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Statistics endpoint accessible"
          echo "Statistics: $stats_body"
          
          # Parse statistics (basic check)
          total_events=$(echo "$stats_body" | grep -o '"totalEvents":[0-9]*' | cut -d':' -f2)
          if [ "$total_events" -gt 0 ]; then
            echo "‚úÖ Events are being persisted (Total: $total_events)"
          else
            echo "‚ö†Ô∏è  No events found in database"
          fi
        else
          echo "‚ùå Failed to retrieve statistics (HTTP $http_code)"
        fi

    - name: Check recent events
      run: |
        echo "üìù Checking recent webhook events..."
        
        events_response=$(curl -s -w "%{http_code}" ${{ env.WEBHOOK_URL }}/api/events?limit=5)
        http_code=${events_response: -3}
        events_body=${events_response%???}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Events endpoint accessible"
          
          # Check if events array is not empty
          if echo "$events_body" | grep -q '\[.*\]' && ! echo "$events_body" | grep -q '\[\s*\]'; then
            echo "‚úÖ Recent events retrieved successfully"
            echo "Recent events preview: $(echo "$events_body" | head -c 200)..."
          else
            echo "‚ö†Ô∏è  No recent events found"
          fi
        else
          echo "‚ùå Failed to retrieve events (HTTP $http_code)"
        fi

  # Health Check
  health-check:
    name: Webhook Receiver Health Check
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check application health
      run: |
        echo "üè• Performing health check..."
        
        health_response=$(curl -s -w "%{http_code}" ${{ env.WEBHOOK_URL }}/health)
        http_code=${health_response: -3}
        health_body=${health_response%???}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Webhook receiver is healthy"
          echo "Health status: $health_body"
        else
          echo "‚ùå Health check failed (HTTP $http_code)"
          echo "Response: $health_body"
        fi

    - name: Check application accessibility
      run: |
        echo "üåê Checking application accessibility..."
        
        root_response=$(curl -s -w "%{http_code}" ${{ env.WEBHOOK_URL }}/)
        http_code=${root_response: -3}
        
        if [ "$http_code" = "200" ]; then
          echo "‚úÖ Application root accessible"
        else
          echo "‚ö†Ô∏è  Application root returned HTTP $http_code"
        fi

  # Integration Test Summary
  test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-push-events, test-pull-request-events, test-merge-events, verify-data-persistence, health-check]
    if: always()
    
    steps:
    - name: Generate test report
      run: |
        echo "üìã WEBHOOK INTEGRATION TEST SUMMARY"
        echo "=================================="
        echo ""
        echo "Test Results:"
        echo "- Push Events: ${{ needs.test-push-events.result }}"
        echo "- Pull Request Events: ${{ needs.test-pull-request-events.result }}"
        echo "- Merge Events: ${{ needs.test-merge-events.result }}"
        echo "- Data Persistence: ${{ needs.verify-data-persistence.result }}"
        echo "- Health Check: ${{ needs.health-check.result }}"
        echo ""
        echo "Integration Status: $(
          if [[ "${{ needs.test-push-events.result }}" == "success" && 
                "${{ needs.test-pull-request-events.result }}" == "success" && 
                "${{ needs.test-merge-events.result }}" == "success" ]]; then
            echo "‚úÖ PASSED"
          else
            echo "‚ùå FAILED"
          fi
        )"
        echo ""
        echo "Webhook URL: ${{ env.WEBHOOK_URL }}"
        echo "Test Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "üéØ TechStaX Assessment: Cross-repository integration working!"

    - name: Set job status
      run: |
        if [[ "${{ needs.test-push-events.result }}" == "success" && 
              "${{ needs.test-pull-request-events.result }}" == "success" && 
              "${{ needs.test-merge-events.result }}" == "success" ]]; then
          echo "‚úÖ All integration tests passed successfully!"
          exit 0
        else
          echo "‚ùå Some integration tests failed. Check individual job logs."
          exit 1
        fi
